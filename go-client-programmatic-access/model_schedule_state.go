/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"fmt"
)

// ScheduleState the model 'ScheduleState'
type ScheduleState string

// List of ScheduleState
const (
	SCHEDULESTATE_ACTIVE ScheduleState = "Active"
	SCHEDULESTATE_FAILED_TO_SYNC ScheduleState = "FailedToSync"
	SCHEDULESTATE_NOT_FOUND ScheduleState = "NotFound"
	SCHEDULESTATE_UNKNOWN ScheduleState = "Unknown"
)

// All allowed values of ScheduleState enum
var AllowedScheduleStateEnumValues = []ScheduleState{
	"Active",
	"FailedToSync",
	"NotFound",
	"Unknown",
}

func (v *ScheduleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleState(value)
	for _, existing := range AllowedScheduleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleState", value)
}

// NewScheduleStateFromValue returns a pointer to a valid ScheduleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduleStateFromValue(v string) (*ScheduleState, error) {
	ev := ScheduleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScheduleState: valid values are %v", v, AllowedScheduleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduleState) IsValid() bool {
	for _, existing := range AllowedScheduleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScheduleState value
func (v ScheduleState) Ptr() *ScheduleState {
	return &v
}

type NullableScheduleState struct {
	value *ScheduleState
	isSet bool
}

func (v NullableScheduleState) Get() *ScheduleState {
	return v.value
}

func (v *NullableScheduleState) Set(val *ScheduleState) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleState) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleState(val *ScheduleState) *NullableScheduleState {
	return &NullableScheduleState{value: val, isSet: true}
}

func (v NullableScheduleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

