/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"fmt"
)

// checks if the PackageOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageOut{}

// PackageOut struct for PackageOut
type PackageOut struct {
	Id NullableString `json:"id,omitempty"`
	ResourceConfiguration []ResourceConfiguration `json:"resource_configuration"`
	Name string `json:"name"`
	Status BookingStatus `json:"status"`
	Currency Currency `json:"currency"`
	UnitIntPricePerHour NullableInt32 `json:"unit_int_price_per_hour,omitempty"`
	UnitIntPricePerDay NullableInt32 `json:"unit_int_price_per_day,omitempty"`
	UnitIntPricePerMonth NullableInt32 `json:"unit_int_price_per_month,omitempty"`
	UnitIntPricePerYear NullableInt32 `json:"unit_int_price_per_year,omitempty"`
	RegionalMappingId NullableString `json:"regional_mapping_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PackageOut PackageOut

// NewPackageOut instantiates a new PackageOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageOut(resourceConfiguration []ResourceConfiguration, name string, status BookingStatus, currency Currency) *PackageOut {
	this := PackageOut{}
	this.ResourceConfiguration = resourceConfiguration
	this.Name = name
	this.Status = status
	this.Currency = currency
	return &this
}

// NewPackageOutWithDefaults instantiates a new PackageOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageOutWithDefaults() *PackageOut {
	this := PackageOut{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageOut) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PackageOut) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PackageOut) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PackageOut) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PackageOut) UnsetId() {
	o.Id.Unset()
}

// GetResourceConfiguration returns the ResourceConfiguration field value
func (o *PackageOut) GetResourceConfiguration() []ResourceConfiguration {
	if o == nil {
		var ret []ResourceConfiguration
		return ret
	}

	return o.ResourceConfiguration
}

// GetResourceConfigurationOk returns a tuple with the ResourceConfiguration field value
// and a boolean to check if the value has been set.
func (o *PackageOut) GetResourceConfigurationOk() ([]ResourceConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceConfiguration, true
}

// SetResourceConfiguration sets field value
func (o *PackageOut) SetResourceConfiguration(v []ResourceConfiguration) {
	o.ResourceConfiguration = v
}

// GetName returns the Name field value
func (o *PackageOut) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PackageOut) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PackageOut) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *PackageOut) GetStatus() BookingStatus {
	if o == nil {
		var ret BookingStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PackageOut) GetStatusOk() (*BookingStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PackageOut) SetStatus(v BookingStatus) {
	o.Status = v
}

// GetCurrency returns the Currency field value
func (o *PackageOut) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *PackageOut) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *PackageOut) SetCurrency(v Currency) {
	o.Currency = v
}

// GetUnitIntPricePerHour returns the UnitIntPricePerHour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageOut) GetUnitIntPricePerHour() int32 {
	if o == nil || IsNil(o.UnitIntPricePerHour.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerHour.Get()
}

// GetUnitIntPricePerHourOk returns a tuple with the UnitIntPricePerHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageOut) GetUnitIntPricePerHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerHour.Get(), o.UnitIntPricePerHour.IsSet()
}

// HasUnitIntPricePerHour returns a boolean if a field has been set.
func (o *PackageOut) HasUnitIntPricePerHour() bool {
	if o != nil && o.UnitIntPricePerHour.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerHour gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerHour field.
func (o *PackageOut) SetUnitIntPricePerHour(v int32) {
	o.UnitIntPricePerHour.Set(&v)
}
// SetUnitIntPricePerHourNil sets the value for UnitIntPricePerHour to be an explicit nil
func (o *PackageOut) SetUnitIntPricePerHourNil() {
	o.UnitIntPricePerHour.Set(nil)
}

// UnsetUnitIntPricePerHour ensures that no value is present for UnitIntPricePerHour, not even an explicit nil
func (o *PackageOut) UnsetUnitIntPricePerHour() {
	o.UnitIntPricePerHour.Unset()
}

// GetUnitIntPricePerDay returns the UnitIntPricePerDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageOut) GetUnitIntPricePerDay() int32 {
	if o == nil || IsNil(o.UnitIntPricePerDay.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerDay.Get()
}

// GetUnitIntPricePerDayOk returns a tuple with the UnitIntPricePerDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageOut) GetUnitIntPricePerDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerDay.Get(), o.UnitIntPricePerDay.IsSet()
}

// HasUnitIntPricePerDay returns a boolean if a field has been set.
func (o *PackageOut) HasUnitIntPricePerDay() bool {
	if o != nil && o.UnitIntPricePerDay.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerDay gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerDay field.
func (o *PackageOut) SetUnitIntPricePerDay(v int32) {
	o.UnitIntPricePerDay.Set(&v)
}
// SetUnitIntPricePerDayNil sets the value for UnitIntPricePerDay to be an explicit nil
func (o *PackageOut) SetUnitIntPricePerDayNil() {
	o.UnitIntPricePerDay.Set(nil)
}

// UnsetUnitIntPricePerDay ensures that no value is present for UnitIntPricePerDay, not even an explicit nil
func (o *PackageOut) UnsetUnitIntPricePerDay() {
	o.UnitIntPricePerDay.Unset()
}

// GetUnitIntPricePerMonth returns the UnitIntPricePerMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageOut) GetUnitIntPricePerMonth() int32 {
	if o == nil || IsNil(o.UnitIntPricePerMonth.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerMonth.Get()
}

// GetUnitIntPricePerMonthOk returns a tuple with the UnitIntPricePerMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageOut) GetUnitIntPricePerMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerMonth.Get(), o.UnitIntPricePerMonth.IsSet()
}

// HasUnitIntPricePerMonth returns a boolean if a field has been set.
func (o *PackageOut) HasUnitIntPricePerMonth() bool {
	if o != nil && o.UnitIntPricePerMonth.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerMonth gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerMonth field.
func (o *PackageOut) SetUnitIntPricePerMonth(v int32) {
	o.UnitIntPricePerMonth.Set(&v)
}
// SetUnitIntPricePerMonthNil sets the value for UnitIntPricePerMonth to be an explicit nil
func (o *PackageOut) SetUnitIntPricePerMonthNil() {
	o.UnitIntPricePerMonth.Set(nil)
}

// UnsetUnitIntPricePerMonth ensures that no value is present for UnitIntPricePerMonth, not even an explicit nil
func (o *PackageOut) UnsetUnitIntPricePerMonth() {
	o.UnitIntPricePerMonth.Unset()
}

// GetUnitIntPricePerYear returns the UnitIntPricePerYear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageOut) GetUnitIntPricePerYear() int32 {
	if o == nil || IsNil(o.UnitIntPricePerYear.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerYear.Get()
}

// GetUnitIntPricePerYearOk returns a tuple with the UnitIntPricePerYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageOut) GetUnitIntPricePerYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerYear.Get(), o.UnitIntPricePerYear.IsSet()
}

// HasUnitIntPricePerYear returns a boolean if a field has been set.
func (o *PackageOut) HasUnitIntPricePerYear() bool {
	if o != nil && o.UnitIntPricePerYear.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerYear gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerYear field.
func (o *PackageOut) SetUnitIntPricePerYear(v int32) {
	o.UnitIntPricePerYear.Set(&v)
}
// SetUnitIntPricePerYearNil sets the value for UnitIntPricePerYear to be an explicit nil
func (o *PackageOut) SetUnitIntPricePerYearNil() {
	o.UnitIntPricePerYear.Set(nil)
}

// UnsetUnitIntPricePerYear ensures that no value is present for UnitIntPricePerYear, not even an explicit nil
func (o *PackageOut) UnsetUnitIntPricePerYear() {
	o.UnitIntPricePerYear.Unset()
}

// GetRegionalMappingId returns the RegionalMappingId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageOut) GetRegionalMappingId() string {
	if o == nil || IsNil(o.RegionalMappingId.Get()) {
		var ret string
		return ret
	}
	return *o.RegionalMappingId.Get()
}

// GetRegionalMappingIdOk returns a tuple with the RegionalMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageOut) GetRegionalMappingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionalMappingId.Get(), o.RegionalMappingId.IsSet()
}

// HasRegionalMappingId returns a boolean if a field has been set.
func (o *PackageOut) HasRegionalMappingId() bool {
	if o != nil && o.RegionalMappingId.IsSet() {
		return true
	}

	return false
}

// SetRegionalMappingId gets a reference to the given NullableString and assigns it to the RegionalMappingId field.
func (o *PackageOut) SetRegionalMappingId(v string) {
	o.RegionalMappingId.Set(&v)
}
// SetRegionalMappingIdNil sets the value for RegionalMappingId to be an explicit nil
func (o *PackageOut) SetRegionalMappingIdNil() {
	o.RegionalMappingId.Set(nil)
}

// UnsetRegionalMappingId ensures that no value is present for RegionalMappingId, not even an explicit nil
func (o *PackageOut) UnsetRegionalMappingId() {
	o.RegionalMappingId.Unset()
}

func (o PackageOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["resource_configuration"] = o.ResourceConfiguration
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	toSerialize["currency"] = o.Currency
	if o.UnitIntPricePerHour.IsSet() {
		toSerialize["unit_int_price_per_hour"] = o.UnitIntPricePerHour.Get()
	}
	if o.UnitIntPricePerDay.IsSet() {
		toSerialize["unit_int_price_per_day"] = o.UnitIntPricePerDay.Get()
	}
	if o.UnitIntPricePerMonth.IsSet() {
		toSerialize["unit_int_price_per_month"] = o.UnitIntPricePerMonth.Get()
	}
	if o.UnitIntPricePerYear.IsSet() {
		toSerialize["unit_int_price_per_year"] = o.UnitIntPricePerYear.Get()
	}
	if o.RegionalMappingId.IsSet() {
		toSerialize["regional_mapping_id"] = o.RegionalMappingId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PackageOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resource_configuration",
		"name",
		"status",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPackageOut := _PackageOut{}

	err = json.Unmarshal(data, &varPackageOut)

	if err != nil {
		return err
	}

	*o = PackageOut(varPackageOut)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "resource_configuration")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "unit_int_price_per_hour")
		delete(additionalProperties, "unit_int_price_per_day")
		delete(additionalProperties, "unit_int_price_per_month")
		delete(additionalProperties, "unit_int_price_per_year")
		delete(additionalProperties, "regional_mapping_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePackageOut struct {
	value *PackageOut
	isSet bool
}

func (v NullablePackageOut) Get() *PackageOut {
	return v.value
}

func (v *NullablePackageOut) Set(val *PackageOut) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageOut) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageOut(val *PackageOut) *NullablePackageOut {
	return &NullablePackageOut{value: val, isSet: true}
}

func (v NullablePackageOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


