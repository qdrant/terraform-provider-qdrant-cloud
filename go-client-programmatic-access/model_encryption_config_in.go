/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
)

// checks if the EncryptionConfigIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptionConfigIn{}

// EncryptionConfigIn struct for EncryptionConfigIn
type EncryptionConfigIn struct {
	AwsEncryptionConfig NullableAWSEncryptionConfig `json:"aws_encryption_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EncryptionConfigIn EncryptionConfigIn

// NewEncryptionConfigIn instantiates a new EncryptionConfigIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionConfigIn() *EncryptionConfigIn {
	this := EncryptionConfigIn{}
	return &this
}

// NewEncryptionConfigInWithDefaults instantiates a new EncryptionConfigIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionConfigInWithDefaults() *EncryptionConfigIn {
	this := EncryptionConfigIn{}
	return &this
}

// GetAwsEncryptionConfig returns the AwsEncryptionConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionConfigIn) GetAwsEncryptionConfig() AWSEncryptionConfig {
	if o == nil || IsNil(o.AwsEncryptionConfig.Get()) {
		var ret AWSEncryptionConfig
		return ret
	}
	return *o.AwsEncryptionConfig.Get()
}

// GetAwsEncryptionConfigOk returns a tuple with the AwsEncryptionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionConfigIn) GetAwsEncryptionConfigOk() (*AWSEncryptionConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsEncryptionConfig.Get(), o.AwsEncryptionConfig.IsSet()
}

// HasAwsEncryptionConfig returns a boolean if a field has been set.
func (o *EncryptionConfigIn) HasAwsEncryptionConfig() bool {
	if o != nil && o.AwsEncryptionConfig.IsSet() {
		return true
	}

	return false
}

// SetAwsEncryptionConfig gets a reference to the given NullableAWSEncryptionConfig and assigns it to the AwsEncryptionConfig field.
func (o *EncryptionConfigIn) SetAwsEncryptionConfig(v AWSEncryptionConfig) {
	o.AwsEncryptionConfig.Set(&v)
}
// SetAwsEncryptionConfigNil sets the value for AwsEncryptionConfig to be an explicit nil
func (o *EncryptionConfigIn) SetAwsEncryptionConfigNil() {
	o.AwsEncryptionConfig.Set(nil)
}

// UnsetAwsEncryptionConfig ensures that no value is present for AwsEncryptionConfig, not even an explicit nil
func (o *EncryptionConfigIn) UnsetAwsEncryptionConfig() {
	o.AwsEncryptionConfig.Unset()
}

func (o EncryptionConfigIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptionConfigIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsEncryptionConfig.IsSet() {
		toSerialize["aws_encryption_config"] = o.AwsEncryptionConfig.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EncryptionConfigIn) UnmarshalJSON(data []byte) (err error) {
	varEncryptionConfigIn := _EncryptionConfigIn{}

	err = json.Unmarshal(data, &varEncryptionConfigIn)

	if err != nil {
		return err
	}

	*o = EncryptionConfigIn(varEncryptionConfigIn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aws_encryption_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEncryptionConfigIn struct {
	value *EncryptionConfigIn
	isSet bool
}

func (v NullableEncryptionConfigIn) Get() *EncryptionConfigIn {
	return v.value
}

func (v *NullableEncryptionConfigIn) Set(val *EncryptionConfigIn) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionConfigIn) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionConfigIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionConfigIn(val *EncryptionConfigIn) *NullableEncryptionConfigIn {
	return &NullableEncryptionConfigIn{value: val, isSet: true}
}

func (v NullableEncryptionConfigIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionConfigIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


