/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"fmt"
)

// checks if the ResourceOptionOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceOptionOut{}

// ResourceOptionOut struct for ResourceOptionOut
type ResourceOptionOut struct {
	Id string `json:"id"`
	ResourceType ResourceType `json:"resource_type"`
	Status BookingStatus `json:"status"`
	Name NullableString `json:"name,omitempty"`
	ResourceUnit string `json:"resource_unit"`
	Currency Currency `json:"currency"`
	UnitIntPricePerHour NullableInt32 `json:"unit_int_price_per_hour,omitempty"`
	UnitIntPricePerDay NullableInt32 `json:"unit_int_price_per_day,omitempty"`
	UnitIntPricePerMonth NullableInt32 `json:"unit_int_price_per_month,omitempty"`
	UnitIntPricePerYear NullableInt32 `json:"unit_int_price_per_year,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResourceOptionOut ResourceOptionOut

// NewResourceOptionOut instantiates a new ResourceOptionOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceOptionOut(id string, resourceType ResourceType, status BookingStatus, resourceUnit string, currency Currency) *ResourceOptionOut {
	this := ResourceOptionOut{}
	this.Id = id
	this.ResourceType = resourceType
	this.Status = status
	this.ResourceUnit = resourceUnit
	this.Currency = currency
	return &this
}

// NewResourceOptionOutWithDefaults instantiates a new ResourceOptionOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceOptionOutWithDefaults() *ResourceOptionOut {
	this := ResourceOptionOut{}
	return &this
}

// GetId returns the Id field value
func (o *ResourceOptionOut) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceOptionOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceOptionOut) SetId(v string) {
	o.Id = v
}

// GetResourceType returns the ResourceType field value
func (o *ResourceOptionOut) GetResourceType() ResourceType {
	if o == nil {
		var ret ResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceOptionOut) GetResourceTypeOk() (*ResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceOptionOut) SetResourceType(v ResourceType) {
	o.ResourceType = v
}

// GetStatus returns the Status field value
func (o *ResourceOptionOut) GetStatus() BookingStatus {
	if o == nil {
		var ret BookingStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ResourceOptionOut) GetStatusOk() (*BookingStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ResourceOptionOut) SetStatus(v BookingStatus) {
	o.Status = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceOptionOut) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceOptionOut) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ResourceOptionOut) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ResourceOptionOut) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ResourceOptionOut) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ResourceOptionOut) UnsetName() {
	o.Name.Unset()
}

// GetResourceUnit returns the ResourceUnit field value
func (o *ResourceOptionOut) GetResourceUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceUnit
}

// GetResourceUnitOk returns a tuple with the ResourceUnit field value
// and a boolean to check if the value has been set.
func (o *ResourceOptionOut) GetResourceUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceUnit, true
}

// SetResourceUnit sets field value
func (o *ResourceOptionOut) SetResourceUnit(v string) {
	o.ResourceUnit = v
}

// GetCurrency returns the Currency field value
func (o *ResourceOptionOut) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ResourceOptionOut) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ResourceOptionOut) SetCurrency(v Currency) {
	o.Currency = v
}

// GetUnitIntPricePerHour returns the UnitIntPricePerHour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceOptionOut) GetUnitIntPricePerHour() int32 {
	if o == nil || IsNil(o.UnitIntPricePerHour.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerHour.Get()
}

// GetUnitIntPricePerHourOk returns a tuple with the UnitIntPricePerHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceOptionOut) GetUnitIntPricePerHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerHour.Get(), o.UnitIntPricePerHour.IsSet()
}

// HasUnitIntPricePerHour returns a boolean if a field has been set.
func (o *ResourceOptionOut) HasUnitIntPricePerHour() bool {
	if o != nil && o.UnitIntPricePerHour.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerHour gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerHour field.
func (o *ResourceOptionOut) SetUnitIntPricePerHour(v int32) {
	o.UnitIntPricePerHour.Set(&v)
}
// SetUnitIntPricePerHourNil sets the value for UnitIntPricePerHour to be an explicit nil
func (o *ResourceOptionOut) SetUnitIntPricePerHourNil() {
	o.UnitIntPricePerHour.Set(nil)
}

// UnsetUnitIntPricePerHour ensures that no value is present for UnitIntPricePerHour, not even an explicit nil
func (o *ResourceOptionOut) UnsetUnitIntPricePerHour() {
	o.UnitIntPricePerHour.Unset()
}

// GetUnitIntPricePerDay returns the UnitIntPricePerDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceOptionOut) GetUnitIntPricePerDay() int32 {
	if o == nil || IsNil(o.UnitIntPricePerDay.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerDay.Get()
}

// GetUnitIntPricePerDayOk returns a tuple with the UnitIntPricePerDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceOptionOut) GetUnitIntPricePerDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerDay.Get(), o.UnitIntPricePerDay.IsSet()
}

// HasUnitIntPricePerDay returns a boolean if a field has been set.
func (o *ResourceOptionOut) HasUnitIntPricePerDay() bool {
	if o != nil && o.UnitIntPricePerDay.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerDay gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerDay field.
func (o *ResourceOptionOut) SetUnitIntPricePerDay(v int32) {
	o.UnitIntPricePerDay.Set(&v)
}
// SetUnitIntPricePerDayNil sets the value for UnitIntPricePerDay to be an explicit nil
func (o *ResourceOptionOut) SetUnitIntPricePerDayNil() {
	o.UnitIntPricePerDay.Set(nil)
}

// UnsetUnitIntPricePerDay ensures that no value is present for UnitIntPricePerDay, not even an explicit nil
func (o *ResourceOptionOut) UnsetUnitIntPricePerDay() {
	o.UnitIntPricePerDay.Unset()
}

// GetUnitIntPricePerMonth returns the UnitIntPricePerMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceOptionOut) GetUnitIntPricePerMonth() int32 {
	if o == nil || IsNil(o.UnitIntPricePerMonth.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerMonth.Get()
}

// GetUnitIntPricePerMonthOk returns a tuple with the UnitIntPricePerMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceOptionOut) GetUnitIntPricePerMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerMonth.Get(), o.UnitIntPricePerMonth.IsSet()
}

// HasUnitIntPricePerMonth returns a boolean if a field has been set.
func (o *ResourceOptionOut) HasUnitIntPricePerMonth() bool {
	if o != nil && o.UnitIntPricePerMonth.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerMonth gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerMonth field.
func (o *ResourceOptionOut) SetUnitIntPricePerMonth(v int32) {
	o.UnitIntPricePerMonth.Set(&v)
}
// SetUnitIntPricePerMonthNil sets the value for UnitIntPricePerMonth to be an explicit nil
func (o *ResourceOptionOut) SetUnitIntPricePerMonthNil() {
	o.UnitIntPricePerMonth.Set(nil)
}

// UnsetUnitIntPricePerMonth ensures that no value is present for UnitIntPricePerMonth, not even an explicit nil
func (o *ResourceOptionOut) UnsetUnitIntPricePerMonth() {
	o.UnitIntPricePerMonth.Unset()
}

// GetUnitIntPricePerYear returns the UnitIntPricePerYear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceOptionOut) GetUnitIntPricePerYear() int32 {
	if o == nil || IsNil(o.UnitIntPricePerYear.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitIntPricePerYear.Get()
}

// GetUnitIntPricePerYearOk returns a tuple with the UnitIntPricePerYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceOptionOut) GetUnitIntPricePerYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitIntPricePerYear.Get(), o.UnitIntPricePerYear.IsSet()
}

// HasUnitIntPricePerYear returns a boolean if a field has been set.
func (o *ResourceOptionOut) HasUnitIntPricePerYear() bool {
	if o != nil && o.UnitIntPricePerYear.IsSet() {
		return true
	}

	return false
}

// SetUnitIntPricePerYear gets a reference to the given NullableInt32 and assigns it to the UnitIntPricePerYear field.
func (o *ResourceOptionOut) SetUnitIntPricePerYear(v int32) {
	o.UnitIntPricePerYear.Set(&v)
}
// SetUnitIntPricePerYearNil sets the value for UnitIntPricePerYear to be an explicit nil
func (o *ResourceOptionOut) SetUnitIntPricePerYearNil() {
	o.UnitIntPricePerYear.Set(nil)
}

// UnsetUnitIntPricePerYear ensures that no value is present for UnitIntPricePerYear, not even an explicit nil
func (o *ResourceOptionOut) UnsetUnitIntPricePerYear() {
	o.UnitIntPricePerYear.Unset()
}

func (o ResourceOptionOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceOptionOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["status"] = o.Status
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["resource_unit"] = o.ResourceUnit
	toSerialize["currency"] = o.Currency
	if o.UnitIntPricePerHour.IsSet() {
		toSerialize["unit_int_price_per_hour"] = o.UnitIntPricePerHour.Get()
	}
	if o.UnitIntPricePerDay.IsSet() {
		toSerialize["unit_int_price_per_day"] = o.UnitIntPricePerDay.Get()
	}
	if o.UnitIntPricePerMonth.IsSet() {
		toSerialize["unit_int_price_per_month"] = o.UnitIntPricePerMonth.Get()
	}
	if o.UnitIntPricePerYear.IsSet() {
		toSerialize["unit_int_price_per_year"] = o.UnitIntPricePerYear.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResourceOptionOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"resource_type",
		"status",
		"resource_unit",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceOptionOut := _ResourceOptionOut{}

	err = json.Unmarshal(data, &varResourceOptionOut)

	if err != nil {
		return err
	}

	*o = ResourceOptionOut(varResourceOptionOut)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "resource_type")
		delete(additionalProperties, "status")
		delete(additionalProperties, "name")
		delete(additionalProperties, "resource_unit")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "unit_int_price_per_hour")
		delete(additionalProperties, "unit_int_price_per_day")
		delete(additionalProperties, "unit_int_price_per_month")
		delete(additionalProperties, "unit_int_price_per_year")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResourceOptionOut struct {
	value *ResourceOptionOut
	isSet bool
}

func (v NullableResourceOptionOut) Get() *ResourceOptionOut {
	return v.value
}

func (v *NullableResourceOptionOut) Set(val *ResourceOptionOut) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceOptionOut) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceOptionOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceOptionOut(val *ResourceOptionOut) *NullableResourceOptionOut {
	return &NullableResourceOptionOut{value: val, isSet: true}
}

func (v NullableResourceOptionOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceOptionOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


