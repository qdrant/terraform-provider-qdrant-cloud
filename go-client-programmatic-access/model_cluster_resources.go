/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
)

// checks if the ClusterResources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterResources{}

// ClusterResources struct for ClusterResources
type ClusterResources struct {
	Base *float32 `json:"base,omitempty"`
	Extra *float32 `json:"extra,omitempty"`
	Complimentary *float32 `json:"complimentary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterResources ClusterResources

// NewClusterResources instantiates a new ClusterResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterResources() *ClusterResources {
	this := ClusterResources{}
	var base float32 = 0
	this.Base = &base
	var extra float32 = 0
	this.Extra = &extra
	var complimentary float32 = 0
	this.Complimentary = &complimentary
	return &this
}

// NewClusterResourcesWithDefaults instantiates a new ClusterResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterResourcesWithDefaults() *ClusterResources {
	this := ClusterResources{}
	var base float32 = 0
	this.Base = &base
	var extra float32 = 0
	this.Extra = &extra
	var complimentary float32 = 0
	this.Complimentary = &complimentary
	return &this
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *ClusterResources) GetBase() float32 {
	if o == nil || IsNil(o.Base) {
		var ret float32
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResources) GetBaseOk() (*float32, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *ClusterResources) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given float32 and assigns it to the Base field.
func (o *ClusterResources) SetBase(v float32) {
	o.Base = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *ClusterResources) GetExtra() float32 {
	if o == nil || IsNil(o.Extra) {
		var ret float32
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResources) GetExtraOk() (*float32, bool) {
	if o == nil || IsNil(o.Extra) {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *ClusterResources) HasExtra() bool {
	if o != nil && !IsNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given float32 and assigns it to the Extra field.
func (o *ClusterResources) SetExtra(v float32) {
	o.Extra = &v
}

// GetComplimentary returns the Complimentary field value if set, zero value otherwise.
func (o *ClusterResources) GetComplimentary() float32 {
	if o == nil || IsNil(o.Complimentary) {
		var ret float32
		return ret
	}
	return *o.Complimentary
}

// GetComplimentaryOk returns a tuple with the Complimentary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterResources) GetComplimentaryOk() (*float32, bool) {
	if o == nil || IsNil(o.Complimentary) {
		return nil, false
	}
	return o.Complimentary, true
}

// HasComplimentary returns a boolean if a field has been set.
func (o *ClusterResources) HasComplimentary() bool {
	if o != nil && !IsNil(o.Complimentary) {
		return true
	}

	return false
}

// SetComplimentary gets a reference to the given float32 and assigns it to the Complimentary field.
func (o *ClusterResources) SetComplimentary(v float32) {
	o.Complimentary = &v
}

func (o ClusterResources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterResources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	if !IsNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}
	if !IsNil(o.Complimentary) {
		toSerialize["complimentary"] = o.Complimentary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterResources) UnmarshalJSON(data []byte) (err error) {
	varClusterResources := _ClusterResources{}

	err = json.Unmarshal(data, &varClusterResources)

	if err != nil {
		return err
	}

	*o = ClusterResources(varClusterResources)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "base")
		delete(additionalProperties, "extra")
		delete(additionalProperties, "complimentary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterResources struct {
	value *ClusterResources
	isSet bool
}

func (v NullableClusterResources) Get() *ClusterResources {
	return v.value
}

func (v *NullableClusterResources) Set(val *ClusterResources) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterResources) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterResources(val *ClusterResources) *NullableClusterResources {
	return &NullableClusterResources{value: val, isSet: true}
}

func (v NullableClusterResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


