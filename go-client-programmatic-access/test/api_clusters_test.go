/*
Qdrant Cloud API

Testing ClustersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qdrant_cloud_programmatic_access

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/qdrant/qdrant-cloud-cluster-api/pypi/go-client-programmatic-access"
)

func Test_qdrant_cloud_programmatic_access_ClustersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	configuration.Servers = openapiclient.ServerConfigurations{
		{
			URL:         "https://cloud.qdrant.io/public/v1",
			Description: "public endpoint",
		},
	}
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClustersAPI ListClusters", func(t *testing.T) {

		//t.Skip("skip test") // remove to run test

		accountId := "26204515-2cbc-4150-b80f-02a787d6cf05"

		ctx := context.WithValue(
			context.Background(),
			openapiclient.ContextAPIKeys,
			map[string]openapiclient.APIKey{
				"ApiKeyAuth": {
					Prefix: "apikey",
					Key:    "42c1982f-30ef-42fe-a719-16c7b1a0fd46|n-BBqnHH7pF6XPRLVS0ebhwNSUGLx_Rp-WgSYhLGyKBx76vrnaiyhA",
				},
			},
		)

		resp, httpRes, err := apiClient.ClustersAPI.ListClusters(ctx, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService HttpAddClustersAccountsAccountIdClustersPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var clusterIn openapiclient.ClusterIn

		resp, httpRes, err := apiClient.ClustersAPI.CreateCluster(context.Background(), accountId).ClusterIn(clusterIn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService HttpDeleteClustersAccountsAccountIdClustersClusterIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string
		var clusterId string

		httpRes, err := apiClient.ClustersAPI.DeleteCluster(context.Background(), accountId, clusterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClustersAPIService HttpGetClusterByIdAccountsAccountIdClustersClusterIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterId string
		var accountId string

		resp, httpRes, err := apiClient.ClustersAPI.GetCluster(context.Background(), clusterId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
