/*
Qdrant Cloud API

Testing AuthenticationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package qdrant_cloud_programmatic_access

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/qdrant/qdrant-cloud-cluster-api/pypi/go-client-programmatic-access"
)

func Test_qdrant_cloud_programmatic_access_AuthenticationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthenticationAPIService HttpAddApiKeyAccountsAccountIdAuthApiKeysPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AuthenticationAPI.CreateApiKey(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService HttpDeleteApiKeyAccountsAccountIdAuthApiKeysApiKeyIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var apiKeyId string
		var accountId string

		httpRes, err := apiClient.AuthenticationAPI.DeleteApiKey(context.Background(), apiKeyId, accountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthenticationAPIService HttpGetApiKeysByAccountIdAccountsAccountIdAuthApiKeysGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AuthenticationAPI.ListApiKeys(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
