/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"fmt"
)

// ClusterState Cluster states replicated from Qdrant operator
type ClusterState string

// List of ClusterState
const (
	CLUSTERSTATE_CREATING ClusterState = "Creating"
	CLUSTERSTATE_FAILED_TO_CREATE ClusterState = "FailedToCreate"
	CLUSTERSTATE_UPDATING ClusterState = "Updating"
	CLUSTERSTATE_FAILED_TO_UPDATE ClusterState = "FailedToUpdate"
	CLUSTERSTATE_SCALING ClusterState = "Scaling"
	CLUSTERSTATE_FAILED_TO_SCALE ClusterState = "FailedToScale"
	CLUSTERSTATE_RESTARTING ClusterState = "Restarting"
	CLUSTERSTATE_FAILED_TO_RESTART ClusterState = "FailedToRestart"
	CLUSTERSTATE_UPGRADING ClusterState = "Upgrading"
	CLUSTERSTATE_FAILED_TO_UPGRADE ClusterState = "FailedToUpgrade"
	CLUSTERSTATE_BACKUP_RUNNING ClusterState = "BackupRunning"
	CLUSTERSTATE_FAILED_TO_BACKUP ClusterState = "FailedToBackup"
	CLUSTERSTATE_RESTORING ClusterState = "Restoring"
	CLUSTERSTATE_FAILED_TO_RESTORE ClusterState = "FailedToRestore"
	CLUSTERSTATE_SUSPENDING ClusterState = "Suspending"
	CLUSTERSTATE_SUSPENDED ClusterState = "Suspended"
	CLUSTERSTATE_FAILED_TO_SUSPEND ClusterState = "FailedToSuspend"
	CLUSTERSTATE_RESUMING ClusterState = "Resuming"
	CLUSTERSTATE_FAILED_TO_RESUME ClusterState = "FailedToResume"
	CLUSTERSTATE_HEALTHY ClusterState = "Healthy"
	CLUSTERSTATE_NOT_READY ClusterState = "NotReady"
	CLUSTERSTATE_RECOVERY_MODE ClusterState = "RecoveryMode"
	CLUSTERSTATE_MANUAL_MAINTENANCE ClusterState = "ManualMaintenance"
	CLUSTERSTATE_FAILED_TO_SYNC ClusterState = "FailedToSync"
	CLUSTERSTATE_NOT_FOUND ClusterState = "NotFound"
	CLUSTERSTATE_UNKNOWN ClusterState = "Unknown"
)

// All allowed values of ClusterState enum
var AllowedClusterStateEnumValues = []ClusterState{
	"Creating",
	"FailedToCreate",
	"Updating",
	"FailedToUpdate",
	"Scaling",
	"FailedToScale",
	"Restarting",
	"FailedToRestart",
	"Upgrading",
	"FailedToUpgrade",
	"BackupRunning",
	"FailedToBackup",
	"Restoring",
	"FailedToRestore",
	"Suspending",
	"Suspended",
	"FailedToSuspend",
	"Resuming",
	"FailedToResume",
	"Healthy",
	"NotReady",
	"RecoveryMode",
	"ManualMaintenance",
	"FailedToSync",
	"NotFound",
	"Unknown",
}

func (v *ClusterState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterState(value)
	for _, existing := range AllowedClusterStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterState", value)
}

// NewClusterStateFromValue returns a pointer to a valid ClusterState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterStateFromValue(v string) (*ClusterState, error) {
	ev := ClusterState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterState: valid values are %v", v, AllowedClusterStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterState) IsValid() bool {
	for _, existing := range AllowedClusterStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterState value
func (v ClusterState) Ptr() *ClusterState {
	return &v
}

type NullableClusterState struct {
	value *ClusterState
	isSet bool
}

func (v NullableClusterState) Get() *ClusterState {
	return v.value
}

func (v *NullableClusterState) Set(val *ClusterState) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterState) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterState(val *ClusterState) *NullableClusterState {
	return &NullableClusterState{value: val, isSet: true}
}

func (v NullableClusterState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

