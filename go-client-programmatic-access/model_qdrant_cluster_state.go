/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the QdrantClusterState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QdrantClusterState{}

// QdrantClusterState struct for QdrantClusterState
type QdrantClusterState struct {
	Id string `json:"id"`
	Version NullableString `json:"version,omitempty"`
	ReplicationStatus ReplicationStatus `json:"replicationStatus"`
	Replicas int32 `json:"replicas"`
	AvailableReplicas NullableInt32 `json:"available_replicas,omitempty"`
	RestartedAt NullableTime `json:"restarted_at,omitempty"`
	Nodes interface{} `json:"nodes"`
	Phase NullableClusterState `json:"phase,omitempty"`
	Reason NullableString `json:"reason,omitempty"`
	Endpoint NullableString `json:"endpoint,omitempty"`
	// Whether the cluster is running.
	Current *QdrantClusterStatus `json:"current,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QdrantClusterState QdrantClusterState

// NewQdrantClusterState instantiates a new QdrantClusterState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQdrantClusterState(id string, replicationStatus ReplicationStatus, replicas int32, nodes interface{}) *QdrantClusterState {
	this := QdrantClusterState{}
	this.Id = id
	this.ReplicationStatus = replicationStatus
	this.Replicas = replicas
	this.Nodes = nodes
	var current QdrantClusterStatus = QDRANTCLUSTERSTATUS_RUNNING
	this.Current = &current
	return &this
}

// NewQdrantClusterStateWithDefaults instantiates a new QdrantClusterState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQdrantClusterStateWithDefaults() *QdrantClusterState {
	this := QdrantClusterState{}
	var current QdrantClusterStatus = QDRANTCLUSTERSTATUS_RUNNING
	this.Current = &current
	return &this
}

// GetId returns the Id field value
func (o *QdrantClusterState) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QdrantClusterState) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QdrantClusterState) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QdrantClusterState) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QdrantClusterState) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *QdrantClusterState) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *QdrantClusterState) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *QdrantClusterState) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *QdrantClusterState) UnsetVersion() {
	o.Version.Unset()
}

// GetReplicationStatus returns the ReplicationStatus field value
func (o *QdrantClusterState) GetReplicationStatus() ReplicationStatus {
	if o == nil {
		var ret ReplicationStatus
		return ret
	}

	return o.ReplicationStatus
}

// GetReplicationStatusOk returns a tuple with the ReplicationStatus field value
// and a boolean to check if the value has been set.
func (o *QdrantClusterState) GetReplicationStatusOk() (*ReplicationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationStatus, true
}

// SetReplicationStatus sets field value
func (o *QdrantClusterState) SetReplicationStatus(v ReplicationStatus) {
	o.ReplicationStatus = v
}

// GetReplicas returns the Replicas field value
func (o *QdrantClusterState) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *QdrantClusterState) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *QdrantClusterState) SetReplicas(v int32) {
	o.Replicas = v
}

// GetAvailableReplicas returns the AvailableReplicas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QdrantClusterState) GetAvailableReplicas() int32 {
	if o == nil || IsNil(o.AvailableReplicas.Get()) {
		var ret int32
		return ret
	}
	return *o.AvailableReplicas.Get()
}

// GetAvailableReplicasOk returns a tuple with the AvailableReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QdrantClusterState) GetAvailableReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableReplicas.Get(), o.AvailableReplicas.IsSet()
}

// HasAvailableReplicas returns a boolean if a field has been set.
func (o *QdrantClusterState) HasAvailableReplicas() bool {
	if o != nil && o.AvailableReplicas.IsSet() {
		return true
	}

	return false
}

// SetAvailableReplicas gets a reference to the given NullableInt32 and assigns it to the AvailableReplicas field.
func (o *QdrantClusterState) SetAvailableReplicas(v int32) {
	o.AvailableReplicas.Set(&v)
}
// SetAvailableReplicasNil sets the value for AvailableReplicas to be an explicit nil
func (o *QdrantClusterState) SetAvailableReplicasNil() {
	o.AvailableReplicas.Set(nil)
}

// UnsetAvailableReplicas ensures that no value is present for AvailableReplicas, not even an explicit nil
func (o *QdrantClusterState) UnsetAvailableReplicas() {
	o.AvailableReplicas.Unset()
}

// GetRestartedAt returns the RestartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QdrantClusterState) GetRestartedAt() time.Time {
	if o == nil || IsNil(o.RestartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RestartedAt.Get()
}

// GetRestartedAtOk returns a tuple with the RestartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QdrantClusterState) GetRestartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestartedAt.Get(), o.RestartedAt.IsSet()
}

// HasRestartedAt returns a boolean if a field has been set.
func (o *QdrantClusterState) HasRestartedAt() bool {
	if o != nil && o.RestartedAt.IsSet() {
		return true
	}

	return false
}

// SetRestartedAt gets a reference to the given NullableTime and assigns it to the RestartedAt field.
func (o *QdrantClusterState) SetRestartedAt(v time.Time) {
	o.RestartedAt.Set(&v)
}
// SetRestartedAtNil sets the value for RestartedAt to be an explicit nil
func (o *QdrantClusterState) SetRestartedAtNil() {
	o.RestartedAt.Set(nil)
}

// UnsetRestartedAt ensures that no value is present for RestartedAt, not even an explicit nil
func (o *QdrantClusterState) UnsetRestartedAt() {
	o.RestartedAt.Unset()
}

// GetNodes returns the Nodes field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *QdrantClusterState) GetNodes() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QdrantClusterState) GetNodesOk() (interface{}, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// SetNodes sets field value
func (o *QdrantClusterState) SetNodes(v interface{}) {
	o.Nodes = v
}

// GetPhase returns the Phase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QdrantClusterState) GetPhase() ClusterState {
	if o == nil || IsNil(o.Phase.Get()) {
		var ret ClusterState
		return ret
	}
	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QdrantClusterState) GetPhaseOk() (*ClusterState, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// HasPhase returns a boolean if a field has been set.
func (o *QdrantClusterState) HasPhase() bool {
	if o != nil && o.Phase.IsSet() {
		return true
	}

	return false
}

// SetPhase gets a reference to the given NullableClusterState and assigns it to the Phase field.
func (o *QdrantClusterState) SetPhase(v ClusterState) {
	o.Phase.Set(&v)
}
// SetPhaseNil sets the value for Phase to be an explicit nil
func (o *QdrantClusterState) SetPhaseNil() {
	o.Phase.Set(nil)
}

// UnsetPhase ensures that no value is present for Phase, not even an explicit nil
func (o *QdrantClusterState) UnsetPhase() {
	o.Phase.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QdrantClusterState) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QdrantClusterState) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *QdrantClusterState) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *QdrantClusterState) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *QdrantClusterState) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *QdrantClusterState) UnsetReason() {
	o.Reason.Unset()
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QdrantClusterState) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint.Get()) {
		var ret string
		return ret
	}
	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QdrantClusterState) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// HasEndpoint returns a boolean if a field has been set.
func (o *QdrantClusterState) HasEndpoint() bool {
	if o != nil && o.Endpoint.IsSet() {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given NullableString and assigns it to the Endpoint field.
func (o *QdrantClusterState) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}
// SetEndpointNil sets the value for Endpoint to be an explicit nil
func (o *QdrantClusterState) SetEndpointNil() {
	o.Endpoint.Set(nil)
}

// UnsetEndpoint ensures that no value is present for Endpoint, not even an explicit nil
func (o *QdrantClusterState) UnsetEndpoint() {
	o.Endpoint.Unset()
}

// GetCurrent returns the Current field value if set, zero value otherwise.
func (o *QdrantClusterState) GetCurrent() QdrantClusterStatus {
	if o == nil || IsNil(o.Current) {
		var ret QdrantClusterStatus
		return ret
	}
	return *o.Current
}

// GetCurrentOk returns a tuple with the Current field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QdrantClusterState) GetCurrentOk() (*QdrantClusterStatus, bool) {
	if o == nil || IsNil(o.Current) {
		return nil, false
	}
	return o.Current, true
}

// HasCurrent returns a boolean if a field has been set.
func (o *QdrantClusterState) HasCurrent() bool {
	if o != nil && !IsNil(o.Current) {
		return true
	}

	return false
}

// SetCurrent gets a reference to the given QdrantClusterStatus and assigns it to the Current field.
func (o *QdrantClusterState) SetCurrent(v QdrantClusterStatus) {
	o.Current = &v
}

func (o QdrantClusterState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QdrantClusterState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	toSerialize["replicationStatus"] = o.ReplicationStatus
	toSerialize["replicas"] = o.Replicas
	if o.AvailableReplicas.IsSet() {
		toSerialize["available_replicas"] = o.AvailableReplicas.Get()
	}
	if o.RestartedAt.IsSet() {
		toSerialize["restarted_at"] = o.RestartedAt.Get()
	}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	if o.Phase.IsSet() {
		toSerialize["phase"] = o.Phase.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.Endpoint.IsSet() {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if !IsNil(o.Current) {
		toSerialize["current"] = o.Current
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QdrantClusterState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"replicationStatus",
		"replicas",
		"nodes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQdrantClusterState := _QdrantClusterState{}

	err = json.Unmarshal(data, &varQdrantClusterState)

	if err != nil {
		return err
	}

	*o = QdrantClusterState(varQdrantClusterState)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "version")
		delete(additionalProperties, "replicationStatus")
		delete(additionalProperties, "replicas")
		delete(additionalProperties, "available_replicas")
		delete(additionalProperties, "restarted_at")
		delete(additionalProperties, "nodes")
		delete(additionalProperties, "phase")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "endpoint")
		delete(additionalProperties, "current")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQdrantClusterState struct {
	value *QdrantClusterState
	isSet bool
}

func (v NullableQdrantClusterState) Get() *QdrantClusterState {
	return v.value
}

func (v *NullableQdrantClusterState) Set(val *QdrantClusterState) {
	v.value = val
	v.isSet = true
}

func (v NullableQdrantClusterState) IsSet() bool {
	return v.isSet
}

func (v *NullableQdrantClusterState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQdrantClusterState(val *QdrantClusterState) *NullableQdrantClusterState {
	return &NullableQdrantClusterState{value: val, isSet: true}
}

func (v NullableQdrantClusterState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQdrantClusterState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


