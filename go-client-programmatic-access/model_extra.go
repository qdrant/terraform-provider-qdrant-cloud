/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"fmt"
)

// Extra struct for Extra
type Extra struct {
	float32 *float32
	int32 *int32
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Extra) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into float32
	err = json.Unmarshal(data, &dst.float32);
	if err == nil {
		jsonfloat32, _ := json.Marshal(dst.float32)
		if string(jsonfloat32) == "{}" { // empty struct
			dst.float32 = nil
		} else {
			return nil // data stored in dst.float32, return on the first match
		}
	} else {
		dst.float32 = nil
	}

	// try to unmarshal JSON data into int32
	err = json.Unmarshal(data, &dst.int32);
	if err == nil {
		jsonint32, _ := json.Marshal(dst.int32)
		if string(jsonint32) == "{}" { // empty struct
			dst.int32 = nil
		} else {
			return nil // data stored in dst.int32, return on the first match
		}
	} else {
		dst.int32 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Extra)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Extra) MarshalJSON() ([]byte, error) {
	if src.float32 != nil {
		return json.Marshal(&src.float32)
	}

	if src.int32 != nil {
		return json.Marshal(&src.int32)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableExtra struct {
	value *Extra
	isSet bool
}

func (v NullableExtra) Get() *Extra {
	return v.value
}

func (v *NullableExtra) Set(val *Extra) {
	v.value = val
	v.isSet = true
}

func (v NullableExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtra(val *Extra) *NullableExtra {
	return &NullableExtra{value: val, isSet: true}
}

func (v NullableExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


