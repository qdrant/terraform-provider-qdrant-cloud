/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"fmt"
)

// BookingStatus PLANNED - 1: The booking is planned, but not yet active ACTIVE - 2: The booking is active DEACTIVATED - 3: The booking is deactivated
type BookingStatus int32

// List of BookingStatus
const (
	BOOKINGSTATUS__1 BookingStatus = 1
	BOOKINGSTATUS__2 BookingStatus = 2
	BOOKINGSTATUS__3 BookingStatus = 3
)

// All allowed values of BookingStatus enum
var AllowedBookingStatusEnumValues = []BookingStatus{
	1,
	2,
	3,
}

func (v *BookingStatus) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BookingStatus(value)
	for _, existing := range AllowedBookingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BookingStatus", value)
}

// NewBookingStatusFromValue returns a pointer to a valid BookingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBookingStatusFromValue(v int32) (*BookingStatus, error) {
	ev := BookingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BookingStatus: valid values are %v", v, AllowedBookingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BookingStatus) IsValid() bool {
	for _, existing := range AllowedBookingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BookingStatus value
func (v BookingStatus) Ptr() *BookingStatus {
	return &v
}

type NullableBookingStatus struct {
	value *BookingStatus
	isSet bool
}

func (v NullableBookingStatus) Get() *BookingStatus {
	return v.value
}

func (v *NullableBookingStatus) Set(val *BookingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBookingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBookingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookingStatus(val *BookingStatus) *NullableBookingStatus {
	return &NullableBookingStatus{value: val, isSet: true}
}

func (v NullableBookingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

