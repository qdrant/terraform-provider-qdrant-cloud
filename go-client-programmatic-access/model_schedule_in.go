/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ScheduleIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleIn{}

// ScheduleIn struct for ScheduleIn
type ScheduleIn struct {
	CreatorUserId NullableString `json:"creator_user_id,omitempty"`
	AccountId NullableString `json:"account_id,omitempty"`
	Cron string `json:"cron"`
	Retention int32 `json:"retention"`
	PrivateRegionId NullableString `json:"private_region_id,omitempty"`
	MarkedForDeletionAt NullableTime `json:"marked_for_deletion_at,omitempty"`
	Status NullableScheduleState `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScheduleIn ScheduleIn

// NewScheduleIn instantiates a new ScheduleIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleIn(cron string, retention int32) *ScheduleIn {
	this := ScheduleIn{}
	this.Cron = cron
	this.Retention = retention
	return &this
}

// NewScheduleInWithDefaults instantiates a new ScheduleIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleInWithDefaults() *ScheduleIn {
	this := ScheduleIn{}
	return &this
}

// GetCreatorUserId returns the CreatorUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleIn) GetCreatorUserId() string {
	if o == nil || IsNil(o.CreatorUserId.Get()) {
		var ret string
		return ret
	}
	return *o.CreatorUserId.Get()
}

// GetCreatorUserIdOk returns a tuple with the CreatorUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleIn) GetCreatorUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatorUserId.Get(), o.CreatorUserId.IsSet()
}

// HasCreatorUserId returns a boolean if a field has been set.
func (o *ScheduleIn) HasCreatorUserId() bool {
	if o != nil && o.CreatorUserId.IsSet() {
		return true
	}

	return false
}

// SetCreatorUserId gets a reference to the given NullableString and assigns it to the CreatorUserId field.
func (o *ScheduleIn) SetCreatorUserId(v string) {
	o.CreatorUserId.Set(&v)
}
// SetCreatorUserIdNil sets the value for CreatorUserId to be an explicit nil
func (o *ScheduleIn) SetCreatorUserIdNil() {
	o.CreatorUserId.Set(nil)
}

// UnsetCreatorUserId ensures that no value is present for CreatorUserId, not even an explicit nil
func (o *ScheduleIn) UnsetCreatorUserId() {
	o.CreatorUserId.Unset()
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleIn) GetAccountId() string {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleIn) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *ScheduleIn) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *ScheduleIn) SetAccountId(v string) {
	o.AccountId.Set(&v)
}
// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *ScheduleIn) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *ScheduleIn) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetCron returns the Cron field value
func (o *ScheduleIn) GetCron() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cron
}

// GetCronOk returns a tuple with the Cron field value
// and a boolean to check if the value has been set.
func (o *ScheduleIn) GetCronOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cron, true
}

// SetCron sets field value
func (o *ScheduleIn) SetCron(v string) {
	o.Cron = v
}

// GetRetention returns the Retention field value
func (o *ScheduleIn) GetRetention() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *ScheduleIn) GetRetentionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *ScheduleIn) SetRetention(v int32) {
	o.Retention = v
}

// GetPrivateRegionId returns the PrivateRegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleIn) GetPrivateRegionId() string {
	if o == nil || IsNil(o.PrivateRegionId.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateRegionId.Get()
}

// GetPrivateRegionIdOk returns a tuple with the PrivateRegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleIn) GetPrivateRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateRegionId.Get(), o.PrivateRegionId.IsSet()
}

// HasPrivateRegionId returns a boolean if a field has been set.
func (o *ScheduleIn) HasPrivateRegionId() bool {
	if o != nil && o.PrivateRegionId.IsSet() {
		return true
	}

	return false
}

// SetPrivateRegionId gets a reference to the given NullableString and assigns it to the PrivateRegionId field.
func (o *ScheduleIn) SetPrivateRegionId(v string) {
	o.PrivateRegionId.Set(&v)
}
// SetPrivateRegionIdNil sets the value for PrivateRegionId to be an explicit nil
func (o *ScheduleIn) SetPrivateRegionIdNil() {
	o.PrivateRegionId.Set(nil)
}

// UnsetPrivateRegionId ensures that no value is present for PrivateRegionId, not even an explicit nil
func (o *ScheduleIn) UnsetPrivateRegionId() {
	o.PrivateRegionId.Unset()
}

// GetMarkedForDeletionAt returns the MarkedForDeletionAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleIn) GetMarkedForDeletionAt() time.Time {
	if o == nil || IsNil(o.MarkedForDeletionAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.MarkedForDeletionAt.Get()
}

// GetMarkedForDeletionAtOk returns a tuple with the MarkedForDeletionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleIn) GetMarkedForDeletionAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkedForDeletionAt.Get(), o.MarkedForDeletionAt.IsSet()
}

// HasMarkedForDeletionAt returns a boolean if a field has been set.
func (o *ScheduleIn) HasMarkedForDeletionAt() bool {
	if o != nil && o.MarkedForDeletionAt.IsSet() {
		return true
	}

	return false
}

// SetMarkedForDeletionAt gets a reference to the given NullableTime and assigns it to the MarkedForDeletionAt field.
func (o *ScheduleIn) SetMarkedForDeletionAt(v time.Time) {
	o.MarkedForDeletionAt.Set(&v)
}
// SetMarkedForDeletionAtNil sets the value for MarkedForDeletionAt to be an explicit nil
func (o *ScheduleIn) SetMarkedForDeletionAtNil() {
	o.MarkedForDeletionAt.Set(nil)
}

// UnsetMarkedForDeletionAt ensures that no value is present for MarkedForDeletionAt, not even an explicit nil
func (o *ScheduleIn) UnsetMarkedForDeletionAt() {
	o.MarkedForDeletionAt.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScheduleIn) GetStatus() ScheduleState {
	if o == nil || IsNil(o.Status.Get()) {
		var ret ScheduleState
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScheduleIn) GetStatusOk() (*ScheduleState, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ScheduleIn) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableScheduleState and assigns it to the Status field.
func (o *ScheduleIn) SetStatus(v ScheduleState) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ScheduleIn) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ScheduleIn) UnsetStatus() {
	o.Status.Unset()
}

func (o ScheduleIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatorUserId.IsSet() {
		toSerialize["creator_user_id"] = o.CreatorUserId.Get()
	}
	if o.AccountId.IsSet() {
		toSerialize["account_id"] = o.AccountId.Get()
	}
	toSerialize["cron"] = o.Cron
	toSerialize["retention"] = o.Retention
	if o.PrivateRegionId.IsSet() {
		toSerialize["private_region_id"] = o.PrivateRegionId.Get()
	}
	if o.MarkedForDeletionAt.IsSet() {
		toSerialize["marked_for_deletion_at"] = o.MarkedForDeletionAt.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScheduleIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cron",
		"retention",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleIn := _ScheduleIn{}

	err = json.Unmarshal(data, &varScheduleIn)

	if err != nil {
		return err
	}

	*o = ScheduleIn(varScheduleIn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "creator_user_id")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "cron")
		delete(additionalProperties, "retention")
		delete(additionalProperties, "private_region_id")
		delete(additionalProperties, "marked_for_deletion_at")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScheduleIn struct {
	value *ScheduleIn
	isSet bool
}

func (v NullableScheduleIn) Get() *ScheduleIn {
	return v.value
}

func (v *NullableScheduleIn) Set(val *ScheduleIn) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleIn) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleIn(val *ScheduleIn) *NullableScheduleIn {
	return &NullableScheduleIn{value: val, isSet: true}
}

func (v NullableScheduleIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


