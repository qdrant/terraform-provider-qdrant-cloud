/*
Qdrant Cloud API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qdrant_cloud_programmatic_access

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ClusterOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterOut{}

// ClusterOut struct for ClusterOut
type ClusterOut struct {
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	OwnerId NullableString `json:"owner_id,omitempty"`
	AccountId NullableString `json:"account_id,omitempty"`
	Name string `json:"name"`
	CloudProvider string `json:"cloud_provider"`
	CloudRegion string `json:"cloud_region"`
	CloudRegionAz NullableString `json:"cloud_region_az,omitempty"`
	CloudRegionSetup NullableString `json:"cloud_region_setup,omitempty"`
	CurrentConfigurationId string `json:"current_configuration_id"`
	PrivateRegionId NullableString `json:"private_region_id,omitempty"`
	EncryptionKeyId NullableString `json:"encryption_key_id,omitempty"`
	MarkedForDeletionAt NullableTime `json:"marked_for_deletion_at,omitempty"`
	Version NullableString `json:"version,omitempty"`
	Url string `json:"url"`
	State NullableQdrantClusterState `json:"state,omitempty"`
	Configuration NullableClusterConfigurationOut `json:"configuration,omitempty"`
	Resources NullableClusterResourcesSummary `json:"resources,omitempty"`
	TotalExtraDisk *int32 `json:"total_extra_disk,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClusterOut ClusterOut

// NewClusterOut instantiates a new ClusterOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterOut(id string, createdAt time.Time, name string, cloudProvider string, cloudRegion string, currentConfigurationId string, url string) *ClusterOut {
	this := ClusterOut{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Name = name
	this.CloudProvider = cloudProvider
	this.CloudRegion = cloudRegion
	this.CurrentConfigurationId = currentConfigurationId
	this.Url = url
	var totalExtraDisk int32 = 0
	this.TotalExtraDisk = &totalExtraDisk
	return &this
}

// NewClusterOutWithDefaults instantiates a new ClusterOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterOutWithDefaults() *ClusterOut {
	this := ClusterOut{}
	var totalExtraDisk int32 = 0
	this.TotalExtraDisk = &totalExtraDisk
	return &this
}

// GetId returns the Id field value
func (o *ClusterOut) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ClusterOut) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ClusterOut) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ClusterOut) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId.Get()) {
		var ret string
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetOwnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ClusterOut) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableString and assigns it to the OwnerId field.
func (o *ClusterOut) SetOwnerId(v string) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *ClusterOut) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *ClusterOut) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetAccountId() string {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *ClusterOut) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *ClusterOut) SetAccountId(v string) {
	o.AccountId.Set(&v)
}
// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *ClusterOut) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *ClusterOut) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetName returns the Name field value
func (o *ClusterOut) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClusterOut) SetName(v string) {
	o.Name = v
}

// GetCloudProvider returns the CloudProvider field value
func (o *ClusterOut) GetCloudProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetCloudProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *ClusterOut) SetCloudProvider(v string) {
	o.CloudProvider = v
}

// GetCloudRegion returns the CloudRegion field value
func (o *ClusterOut) GetCloudRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloudRegion
}

// GetCloudRegionOk returns a tuple with the CloudRegion field value
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetCloudRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudRegion, true
}

// SetCloudRegion sets field value
func (o *ClusterOut) SetCloudRegion(v string) {
	o.CloudRegion = v
}

// GetCloudRegionAz returns the CloudRegionAz field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetCloudRegionAz() string {
	if o == nil || IsNil(o.CloudRegionAz.Get()) {
		var ret string
		return ret
	}
	return *o.CloudRegionAz.Get()
}

// GetCloudRegionAzOk returns a tuple with the CloudRegionAz field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetCloudRegionAzOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudRegionAz.Get(), o.CloudRegionAz.IsSet()
}

// HasCloudRegionAz returns a boolean if a field has been set.
func (o *ClusterOut) HasCloudRegionAz() bool {
	if o != nil && o.CloudRegionAz.IsSet() {
		return true
	}

	return false
}

// SetCloudRegionAz gets a reference to the given NullableString and assigns it to the CloudRegionAz field.
func (o *ClusterOut) SetCloudRegionAz(v string) {
	o.CloudRegionAz.Set(&v)
}
// SetCloudRegionAzNil sets the value for CloudRegionAz to be an explicit nil
func (o *ClusterOut) SetCloudRegionAzNil() {
	o.CloudRegionAz.Set(nil)
}

// UnsetCloudRegionAz ensures that no value is present for CloudRegionAz, not even an explicit nil
func (o *ClusterOut) UnsetCloudRegionAz() {
	o.CloudRegionAz.Unset()
}

// GetCloudRegionSetup returns the CloudRegionSetup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetCloudRegionSetup() string {
	if o == nil || IsNil(o.CloudRegionSetup.Get()) {
		var ret string
		return ret
	}
	return *o.CloudRegionSetup.Get()
}

// GetCloudRegionSetupOk returns a tuple with the CloudRegionSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetCloudRegionSetupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudRegionSetup.Get(), o.CloudRegionSetup.IsSet()
}

// HasCloudRegionSetup returns a boolean if a field has been set.
func (o *ClusterOut) HasCloudRegionSetup() bool {
	if o != nil && o.CloudRegionSetup.IsSet() {
		return true
	}

	return false
}

// SetCloudRegionSetup gets a reference to the given NullableString and assigns it to the CloudRegionSetup field.
func (o *ClusterOut) SetCloudRegionSetup(v string) {
	o.CloudRegionSetup.Set(&v)
}
// SetCloudRegionSetupNil sets the value for CloudRegionSetup to be an explicit nil
func (o *ClusterOut) SetCloudRegionSetupNil() {
	o.CloudRegionSetup.Set(nil)
}

// UnsetCloudRegionSetup ensures that no value is present for CloudRegionSetup, not even an explicit nil
func (o *ClusterOut) UnsetCloudRegionSetup() {
	o.CloudRegionSetup.Unset()
}

// GetCurrentConfigurationId returns the CurrentConfigurationId field value
func (o *ClusterOut) GetCurrentConfigurationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentConfigurationId
}

// GetCurrentConfigurationIdOk returns a tuple with the CurrentConfigurationId field value
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetCurrentConfigurationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentConfigurationId, true
}

// SetCurrentConfigurationId sets field value
func (o *ClusterOut) SetCurrentConfigurationId(v string) {
	o.CurrentConfigurationId = v
}

// GetPrivateRegionId returns the PrivateRegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetPrivateRegionId() string {
	if o == nil || IsNil(o.PrivateRegionId.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateRegionId.Get()
}

// GetPrivateRegionIdOk returns a tuple with the PrivateRegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetPrivateRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateRegionId.Get(), o.PrivateRegionId.IsSet()
}

// HasPrivateRegionId returns a boolean if a field has been set.
func (o *ClusterOut) HasPrivateRegionId() bool {
	if o != nil && o.PrivateRegionId.IsSet() {
		return true
	}

	return false
}

// SetPrivateRegionId gets a reference to the given NullableString and assigns it to the PrivateRegionId field.
func (o *ClusterOut) SetPrivateRegionId(v string) {
	o.PrivateRegionId.Set(&v)
}
// SetPrivateRegionIdNil sets the value for PrivateRegionId to be an explicit nil
func (o *ClusterOut) SetPrivateRegionIdNil() {
	o.PrivateRegionId.Set(nil)
}

// UnsetPrivateRegionId ensures that no value is present for PrivateRegionId, not even an explicit nil
func (o *ClusterOut) UnsetPrivateRegionId() {
	o.PrivateRegionId.Unset()
}

// GetEncryptionKeyId returns the EncryptionKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetEncryptionKeyId() string {
	if o == nil || IsNil(o.EncryptionKeyId.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionKeyId.Get()
}

// GetEncryptionKeyIdOk returns a tuple with the EncryptionKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetEncryptionKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKeyId.Get(), o.EncryptionKeyId.IsSet()
}

// HasEncryptionKeyId returns a boolean if a field has been set.
func (o *ClusterOut) HasEncryptionKeyId() bool {
	if o != nil && o.EncryptionKeyId.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyId gets a reference to the given NullableString and assigns it to the EncryptionKeyId field.
func (o *ClusterOut) SetEncryptionKeyId(v string) {
	o.EncryptionKeyId.Set(&v)
}
// SetEncryptionKeyIdNil sets the value for EncryptionKeyId to be an explicit nil
func (o *ClusterOut) SetEncryptionKeyIdNil() {
	o.EncryptionKeyId.Set(nil)
}

// UnsetEncryptionKeyId ensures that no value is present for EncryptionKeyId, not even an explicit nil
func (o *ClusterOut) UnsetEncryptionKeyId() {
	o.EncryptionKeyId.Unset()
}

// GetMarkedForDeletionAt returns the MarkedForDeletionAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetMarkedForDeletionAt() time.Time {
	if o == nil || IsNil(o.MarkedForDeletionAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.MarkedForDeletionAt.Get()
}

// GetMarkedForDeletionAtOk returns a tuple with the MarkedForDeletionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetMarkedForDeletionAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkedForDeletionAt.Get(), o.MarkedForDeletionAt.IsSet()
}

// HasMarkedForDeletionAt returns a boolean if a field has been set.
func (o *ClusterOut) HasMarkedForDeletionAt() bool {
	if o != nil && o.MarkedForDeletionAt.IsSet() {
		return true
	}

	return false
}

// SetMarkedForDeletionAt gets a reference to the given NullableTime and assigns it to the MarkedForDeletionAt field.
func (o *ClusterOut) SetMarkedForDeletionAt(v time.Time) {
	o.MarkedForDeletionAt.Set(&v)
}
// SetMarkedForDeletionAtNil sets the value for MarkedForDeletionAt to be an explicit nil
func (o *ClusterOut) SetMarkedForDeletionAtNil() {
	o.MarkedForDeletionAt.Set(nil)
}

// UnsetMarkedForDeletionAt ensures that no value is present for MarkedForDeletionAt, not even an explicit nil
func (o *ClusterOut) UnsetMarkedForDeletionAt() {
	o.MarkedForDeletionAt.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *ClusterOut) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *ClusterOut) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *ClusterOut) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *ClusterOut) UnsetVersion() {
	o.Version.Unset()
}

// GetUrl returns the Url field value
func (o *ClusterOut) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ClusterOut) SetUrl(v string) {
	o.Url = v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetState() QdrantClusterState {
	if o == nil || IsNil(o.State.Get()) {
		var ret QdrantClusterState
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetStateOk() (*QdrantClusterState, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *ClusterOut) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableQdrantClusterState and assigns it to the State field.
func (o *ClusterOut) SetState(v QdrantClusterState) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *ClusterOut) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *ClusterOut) UnsetState() {
	o.State.Unset()
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetConfiguration() ClusterConfigurationOut {
	if o == nil || IsNil(o.Configuration.Get()) {
		var ret ClusterConfigurationOut
		return ret
	}
	return *o.Configuration.Get()
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetConfigurationOk() (*ClusterConfigurationOut, bool) {
	if o == nil {
		return nil, false
	}
	return o.Configuration.Get(), o.Configuration.IsSet()
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ClusterOut) HasConfiguration() bool {
	if o != nil && o.Configuration.IsSet() {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given NullableClusterConfigurationOut and assigns it to the Configuration field.
func (o *ClusterOut) SetConfiguration(v ClusterConfigurationOut) {
	o.Configuration.Set(&v)
}
// SetConfigurationNil sets the value for Configuration to be an explicit nil
func (o *ClusterOut) SetConfigurationNil() {
	o.Configuration.Set(nil)
}

// UnsetConfiguration ensures that no value is present for Configuration, not even an explicit nil
func (o *ClusterOut) UnsetConfiguration() {
	o.Configuration.Unset()
}

// GetResources returns the Resources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterOut) GetResources() ClusterResourcesSummary {
	if o == nil || IsNil(o.Resources.Get()) {
		var ret ClusterResourcesSummary
		return ret
	}
	return *o.Resources.Get()
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterOut) GetResourcesOk() (*ClusterResourcesSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources.Get(), o.Resources.IsSet()
}

// HasResources returns a boolean if a field has been set.
func (o *ClusterOut) HasResources() bool {
	if o != nil && o.Resources.IsSet() {
		return true
	}

	return false
}

// SetResources gets a reference to the given NullableClusterResourcesSummary and assigns it to the Resources field.
func (o *ClusterOut) SetResources(v ClusterResourcesSummary) {
	o.Resources.Set(&v)
}
// SetResourcesNil sets the value for Resources to be an explicit nil
func (o *ClusterOut) SetResourcesNil() {
	o.Resources.Set(nil)
}

// UnsetResources ensures that no value is present for Resources, not even an explicit nil
func (o *ClusterOut) UnsetResources() {
	o.Resources.Unset()
}

// GetTotalExtraDisk returns the TotalExtraDisk field value if set, zero value otherwise.
func (o *ClusterOut) GetTotalExtraDisk() int32 {
	if o == nil || IsNil(o.TotalExtraDisk) {
		var ret int32
		return ret
	}
	return *o.TotalExtraDisk
}

// GetTotalExtraDiskOk returns a tuple with the TotalExtraDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterOut) GetTotalExtraDiskOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalExtraDisk) {
		return nil, false
	}
	return o.TotalExtraDisk, true
}

// HasTotalExtraDisk returns a boolean if a field has been set.
func (o *ClusterOut) HasTotalExtraDisk() bool {
	if o != nil && !IsNil(o.TotalExtraDisk) {
		return true
	}

	return false
}

// SetTotalExtraDisk gets a reference to the given int32 and assigns it to the TotalExtraDisk field.
func (o *ClusterOut) SetTotalExtraDisk(v int32) {
	o.TotalExtraDisk = &v
}

func (o ClusterOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	if o.OwnerId.IsSet() {
		toSerialize["owner_id"] = o.OwnerId.Get()
	}
	if o.AccountId.IsSet() {
		toSerialize["account_id"] = o.AccountId.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["cloud_provider"] = o.CloudProvider
	toSerialize["cloud_region"] = o.CloudRegion
	if o.CloudRegionAz.IsSet() {
		toSerialize["cloud_region_az"] = o.CloudRegionAz.Get()
	}
	if o.CloudRegionSetup.IsSet() {
		toSerialize["cloud_region_setup"] = o.CloudRegionSetup.Get()
	}
	toSerialize["current_configuration_id"] = o.CurrentConfigurationId
	if o.PrivateRegionId.IsSet() {
		toSerialize["private_region_id"] = o.PrivateRegionId.Get()
	}
	if o.EncryptionKeyId.IsSet() {
		toSerialize["encryption_key_id"] = o.EncryptionKeyId.Get()
	}
	if o.MarkedForDeletionAt.IsSet() {
		toSerialize["marked_for_deletion_at"] = o.MarkedForDeletionAt.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	toSerialize["url"] = o.Url
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.Configuration.IsSet() {
		toSerialize["configuration"] = o.Configuration.Get()
	}
	if o.Resources.IsSet() {
		toSerialize["resources"] = o.Resources.Get()
	}
	if !IsNil(o.TotalExtraDisk) {
		toSerialize["total_extra_disk"] = o.TotalExtraDisk
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ClusterOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"name",
		"cloud_provider",
		"cloud_region",
		"current_configuration_id",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterOut := _ClusterOut{}

	err = json.Unmarshal(data, &varClusterOut)

	if err != nil {
		return err
	}

	*o = ClusterOut(varClusterOut)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "owner_id")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "cloud_provider")
		delete(additionalProperties, "cloud_region")
		delete(additionalProperties, "cloud_region_az")
		delete(additionalProperties, "cloud_region_setup")
		delete(additionalProperties, "current_configuration_id")
		delete(additionalProperties, "private_region_id")
		delete(additionalProperties, "encryption_key_id")
		delete(additionalProperties, "marked_for_deletion_at")
		delete(additionalProperties, "version")
		delete(additionalProperties, "url")
		delete(additionalProperties, "state")
		delete(additionalProperties, "configuration")
		delete(additionalProperties, "resources")
		delete(additionalProperties, "total_extra_disk")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClusterOut struct {
	value *ClusterOut
	isSet bool
}

func (v NullableClusterOut) Get() *ClusterOut {
	return v.value
}

func (v *NullableClusterOut) Set(val *ClusterOut) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterOut) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterOut(val *ClusterOut) *NullableClusterOut {
	return &NullableClusterOut{value: val, isSet: true}
}

func (v NullableClusterOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


